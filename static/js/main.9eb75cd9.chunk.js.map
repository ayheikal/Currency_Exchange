{"version":3,"sources":["logo.svg","Converter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Converter","props","handleSelect","e","setState","target","name","value","calculate","handleInput","amount","result","date","state","isNaN","fetch","base","then","res","json","data","console","log","rates","convertTo","toFixed","currencies","this","className","type","onChange","map","currency","key","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,wJCiG5BC,E,YA5Fb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAYRC,aAAe,SAAAC,GAAM,IAAD,EAClB,EAAKC,UAAL,mBAEKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,OAF9B,uBAGY,MAHZ,GAKE,EAAKC,YAnBS,EAuBlBC,YAAc,SAAAN,GACZ,EAAKC,SACH,CACEM,OAAQP,EAAEE,OAAOE,MACjBI,OAAQ,KACRC,KAAM,MAER,EAAKJ,YA9BS,EAiClBA,UAAU,WACR,IAAME,EAAO,EAAKG,MAAMH,OACrBA,IAASI,OAIVC,MAAM,+CAAD,OAAgD,EAAKF,MAAMG,OAC/DC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,IAAMR,EAAKQ,EAAKR,KACVD,GAAQS,EAAKG,MAAM,EAAKV,MAAMW,WAAWd,GAAQe,QAAQ,GAC/D,EAAKrB,SAAS,CACZQ,OACAD,eA7CN,EAAKE,MAAM,CACTa,WAAW,CAAC,MAAM,MAAM,MAAM,MAAM,OACpCV,KAAK,MACLN,OAAO,GACPc,UAAU,MACVb,OAAO,GACPC,KAAK,IARS,E,sEAsDT,IAAD,EAC8Ce,KAAKd,MAAnDa,EADA,EACAA,WAAWV,EADX,EACWA,KAAKN,EADhB,EACgBA,OAAOc,EADvB,EACuBA,UAAUb,EADjC,EACiCA,OAAOC,EADxC,EACwCA,KAC9C,OACE,yBAAKgB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,sBAEnB,yBAAKA,UAAU,kBACb,4BAAKlB,EAAL,IAAcM,EAAd,sBACA,4BAAKL,EAAL,IAAca,GACd,oCAAUZ,GACV,yBAAKgB,UAAU,OACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBACd,2BAAQC,KAAK,SAASD,UAAU,oCAAoCE,SAAUH,KAAKlB,YAAaF,MAAOG,IACvG,4BAAQJ,KAAK,OAAOC,MAAOS,EAAMc,SAAUH,KAAKzB,aAAc0B,UAAU,gCACrEF,EAAWK,KAAI,SAAAC,GAAQ,OAAE,4BAAQC,IAAKD,EAAUzB,MAAOyB,GAAWA,QAIvE,0BAAMJ,UAAU,oBACd,2BAAQM,UAAU,EAAO3B,MAAOI,EAAQiB,UAAU,sCAClD,4BAAStB,KAAK,YAAYC,MAAOiB,EAAWM,SAAUH,KAAKzB,aAAc0B,UAAU,gCAChFF,EAAWK,KAAI,SAAAC,GAAQ,OAAE,4BAAQC,IAAKD,EAAUzB,MAAOyB,GAAWA,SAIzE,yBAAKJ,UAAU,uCACb,wBAAIA,UAAU,QAAd,wB,GAnFYO,IAAMC,WCQfC,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCKcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.9eb75cd9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\n\n\nclass Converter extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      currencies:[\"USD\",\"AUD\",\"SGD\",\"PHP\",\"EUR\"],\n      base:\"USD\",\n      amount:'',\n      convertTo:'EUR',\n      result:'',\n      date:'',\n\n    }\n  }\n\n  handleSelect = e => {\n    this.setState(\n      {\n        [e.target.name]: e.target.value,\n        result: null\n      },\n      this.calculate\n    );\n  };\n\n  handleInput = e => {\n    this.setState(\n      {\n        amount: e.target.value,\n        result: null,\n        date: null\n      },\n      this.calculate\n    );\n  };\n  calculate=()=>{\n    const amount=this.state.amount\n    if(amount===isNaN){\n      return;\n    }\n    else{\n      fetch(`https://api.exchangeratesapi.io/latest?base=${this.state.base}`)\n      .then(res=>res.json())\n      .then(data=>{\n        console.log(data)\n        const date=data.date\n        const result=(data.rates[this.state.convertTo]*amount).toFixed(4)\n        this.setState({\n          date,\n          result,\n\n        })\n\n      })\n    }\n  }\n  render(){\n    const{currencies,base,amount,convertTo,result,date}=this.state;\n    return(\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-6 mx-auto\"></div>\n        </div>\n      <div className=\"card card-body\">\n        <h2>{amount} {base} is equivalent to </h2>\n        <h2>{result} {convertTo}</h2>\n        <p>As of {date}</p>\n        <div className=\"row\">\n          <div className=\"col-lg-10 col-md-10\">\n            <form className=\"form-inline-im-4\">\n              <input  type=\"number\" className=\"form-control form-control-lg-mx-3\" onChange={this.handleInput} value={amount}></input>\n              <select name=\"base\" value={base} onChange={this.handleSelect} className=\"form-control form-control-lg\">\n                {currencies.map(currency=><option key={currency} value={currency}>{currency}</option>)}\n              </select>\n            </form>\n\n            <form className=\"form-inline-im-4\">\n              <input  disabled={true}  value={result} className=\"form-control form-control-lg-mx-3\"></input>\n              <select  name=\"convertTo\" value={convertTo} onChange={this.handleSelect} className=\"form-control form-control-lg\">\n                {currencies.map(currency=><option key={currency} value={currency}>{currency}</option>)}\n              </select>\n            </form>\n          </div>\n          <div className=\"col-lg-2 col-md-2 align-self-center\">\n            <h1 className=\"swap\">&#8595;&#8593;</h1>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    )\n  }\n}\n\nexport default Converter;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Converter from './Converter'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Converter></Converter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}